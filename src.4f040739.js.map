{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","intervalId","isActive","document","querySelector","onTick","updateTimerFields","init","time","getTimeComponents","getTime","Date","now","setInterval","currentTime","deltaTime","days","hours","mins","secs","textContent","pad","Math","floor","value","String","padStart","timer","start","call"],"mappings":";;;AA+EA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/EA,QAAA,gBAGMA,IAAAA,EAAAA,WACoC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC7BC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXH,KAAAA,SAAWI,SAASC,cAAiBL,GAAAA,OAAAA,IACrCM,KAAAA,OAAS,KAAKC,kBACdN,KAAAA,WAAaA,EACbO,KAAAA,OAqEb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAnEO,MAAA,WACOC,IAAAA,EAAO,KAAKC,kBAAkB,KAAKT,WAAWU,UAAYC,KAAKC,OAChEP,KAAAA,OAAOG,KAiEpB,CAAA,IAAA,QA9DQ,MAAA,WAAA,IAAA,EAAA,KACA,KAAKN,WAIJA,KAAAA,UAAW,EACPD,KAAAA,WAAaY,YAAY,WACpBC,IAAAA,EAAcH,KAAKC,MACnBG,EAAY,EAAKf,WAAWU,UAAYI,EACxCN,EAAO,EAAKC,kBAAkBM,GACpC,EAAKV,OAAOG,IACb,QAmDX,CAAA,IAAA,oBAjDmD,MAAA,SAAA,GAA3BQ,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAClCpB,KAAAA,SAASK,cAAc,uBAAuBgB,YAAcJ,EAC5DjB,KAAAA,SAASK,cAAc,wBAAwBgB,YAAcH,EAC7DlB,KAAAA,SAASK,cAAc,uBAAuBgB,YAAcF,EAC5DnB,KAAAA,SAASK,cAAc,uBAAuBgB,YAAcD,IA6CrE,CAAA,IAAA,oBA3CuBX,MAAAA,SAAAA,GAQZ,MAAA,CAAEQ,KAPI,KAAKK,IAAIC,KAAKC,MAAMf,EAAQ,QAO1BS,MAND,KAAKI,IACjBC,KAAKC,MAAOf,EAAQ,MAAyB,OAKzBU,KAHT,KAAKG,IAAIC,KAAKC,MAAOf,EAAQ,KAAoB,MAGlCW,KAFf,KAAKE,IAAIC,KAAKC,MAAOf,EAAQ,IAAc,SAqC5D,CAAA,IAAA,MAjCQgB,MAAAA,SAAAA,GACGC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAgCrC,EA5EM5B,GA+CA6B,EAAQ,IAAI7B,EAAe,CAACC,SAAU,WAAYC,WAAY,IAAIW,KAAK,kBAC7EgB,EAAMC,MAAMC,KAAKF","file":"src.4f040739.js","sourceRoot":"..\\src","sourcesContent":["import './common.css';\r\n// Плагін - це клас CountdownTimer, екземпляр якого створює новий таймер з настройками.\r\n\r\nclass CountdownTimer{\r\n    constructor({ selector, targetDate }) {\r\n        this.intervalId = null;\r\n        this.isActive = false;\r\n        this.selector = document.querySelector(`${selector}`);\r\n        this.onTick = this.updateTimerFields;\r\n        this.targetDate = targetDate;\r\n        this.init();\r\n    }    \r\ninit() {\r\n        const time = this.getTimeComponents(this.targetDate.getTime() - Date.now());\r\n        this.onTick(time);\r\n    }\r\n\r\nstart() {\r\n    if (this.isActive) {\r\n      return;\r\n    }\r\n\r\n    this.isActive = true;  \r\n        this.intervalId = setInterval(() => {\r\n            const currentTime = Date.now();\r\n            const deltaTime = this.targetDate.getTime() - currentTime;\r\n            const time = this.getTimeComponents(deltaTime);\r\n            this.onTick(time);\r\n        }, 1000);\r\n    }\r\n    updateTimerFields({ days, hours, mins, secs }) {\r\n    this.selector.querySelector('[data-value=\"days\"]').textContent = days;\r\n    this.selector.querySelector('[data-value=\"hours\"]').textContent = hours;\r\n    this.selector.querySelector('[data-value=\"mins\"]').textContent = mins;\r\n    this.selector.querySelector('[data-value=\"secs\"]').textContent = secs;\r\n    }\r\n     getTimeComponents(time) {\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return { days, hours, mins, secs };\r\n  }\r\n    pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n}\r\nconst timer = new CountdownTimer({selector: '#timer-1', targetDate: new Date('Mar 01, 2021')});\r\ntimer.start.call(timer);\r\n\r\n\r\n// // Для підрахунку значень використовуй такі готові формули, де time - різниця між targetDate і поточною датою.\r\n\r\n// /*\r\n//  * Дні, що залишилися: ділимо значення UTC на 1000 * 60 * 60 * 24, кількість\r\n//  * мілісекунд в один день (мілісекунди * секунди * хвилини * години)\r\n//  */\r\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n// /*\r\n//  * Решта годин: отримуємо залишок від попереднього розрахунку за допомогою оператора\r\n//  * залишку% і ділимо його на кількість мілісекунд в одній годині\r\n//  * (1000 * 60 * 60 = мілісекунди * хвилини * секунди)\r\n//  */\r\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n// /*\r\n//  * Решта хвилин: отримуємо хвилини, що залишилися і ділимо їх на кількість\r\n//  * мілісекунд в одній хвилині (1000 * 60 = мілісекунди * секунди)\r\n//  */\r\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n// /*\r\n//  * Решта секунд: отримуємо секунди, які залишилися і ділимо їх на кількість\r\n//  * миллисекунд в одной секунде (1000)\r\n//  */\r\n// const secs = Math.floor((time % (1000 * 60)) / 1000);"]}